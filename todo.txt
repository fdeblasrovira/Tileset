Separating concerns in a backend application can greatly improve readability, maintainability, and scalability. Here's a common approach for structuring your code to keep your routes clean:

Controllers: Move all the logic in your routes into controller functions. Controllers handle the incoming HTTP requests, call the necessary services or business logic, and send responses back to the client. Each route then simply calls the corresponding controller function, making your routes cleaner.

Services: Separate your business logic into service modules. These handle complex operations and computations. Services should be reusable and handle higher-level operations that arenâ€™t specific to a single route.

Repositories: Use repository or data access layer classes or modules to encapsulate all database operations. This keeps your database access code separate from business logic, making it easier to update or replace your data source in the future.

Models: If you're using an ORM, models represent your database structure and can be kept in their own directory, such as a models folder. Models manage the data schema and enforce data consistency.

Middlewares: Any logic that applies to multiple routes (such as authentication, logging, or validation) should go into middleware functions. Middlewares let you apply logic globally or to specific route groups.